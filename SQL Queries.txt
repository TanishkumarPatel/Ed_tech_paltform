SOME USEFUL SQL QUERIES :-


1.
 SELECT u.first_name, u.last_name, u.email FROM users u JOIN students s ON u.id = s.user_id LEFT JOIN enrollment e ON s.phone_no = e.phone WHERE e.id IS NULL;

Details regarding users who are registered but not enrolled, so that this can be used to send invitations and notifications to this user to make them register


2.

SELECT c.name AS course_name, COUNT(e.id) AS enrollment_count FROM courses c LEFT JOIN enrollment e ON c.name = e.course_name GROUP BY c.name;

Details of courses with no. of enrollments


3.

SELECT u.first_name || ' ' || u.last_name AS student_name, AVG(student_test_scores.score) AS average_score FROM ( SELECT s.user_id, t.name AS test_name, SUM(q.marks) AS score FROM answers a JOIN students s ON a.phone = s.phone_no JOIN questions q ON a.question_id = q.id JOIN tests t ON q.test_name = t.name WHERE a.is_correct = TRUE GROUP BY s.user_id, t.name ) AS student_test_scores JOIN users u ON student_test_scores.user_id = u.id GROUP BY u.id, student_name;

Query regarding average test scores for every student, so that student gets a better idea on what to expect on the D-day


4.
 SELECT u.first_name || ' ' || u.last_name AS student_name, s.phone_no, SUM(q.marks) AS total_marks, RANK() OVER (ORDER BY SUM(q.marks) DESC) AS rank FROM answers a JOIN questions q ON a.question_id = q.id JOIN students s ON a.phone = s.phone_no JOIN users u ON s.user_id = u.id WHERE a.is_correct = TRUE AND q.test_name = 'Physics Test 1' GROUP BY s.phone_no, u.first_name, u.last_name ORDER BY rank;

Query regarding rank list of students

5.
 SELECT q.id AS question_id, q.description, CASE WHEN a.id IS NULL THEN 'Unattempted' ELSE 'Attempted' END AS attempt_status, a.is_correct FROM questions q LEFT JOIN answers a ON q.id = a.question_id AND a.phone = '9876543210' -- Replace with the student's phone or identifier WHERE q.test_name = 'Physics Test 1'; -- Replace with the desired test name
SELECT COUNT(q.id) AS total_questions, COUNT(a.id) AS questions_attempted, SUM(CASE WHEN a.is_correct = TRUE THEN 1 ELSE 0 END) AS correct_answers, SUM(CASE WHEN a.is_correct = FALSE THEN 1 ELSE 0 END) AS incorrect_answers, (COUNT(q.id) - COUNT(a.id)) AS unanswered_questions FROM questions q LEFT JOIN answers a ON q.id = a.question_id AND a.phone = '9876543210'  WHERE q.test_name = 'Physics Test 1'; 

Query regarding question details for a given test, like no. of attempted questions, no. of questions left, no. of incorrect questions and no. of correct questions


6.
 SELECT cf.course_name, f.name AS faculty_name FROM course_faculty cf JOIN faculty f ON cf.faculty_id = f.id JOIN courses c ON cf.course_name = c.name;

Retrieve Faculty Associated with Courses.


7.
 SELECT s.phone_no, u.first_name, u.last_name, s.city, s.state FROM students s JOIN users u ON s.user_id = u.id;
 Fetches student phone numbers, names (from users), city, and state to get a consolidated view of student demographics


8.
 SELECT u.first_name || ' ' || u.last_name AS student_name, dp.subject_name FROM doubt_panel dp JOIN students s ON dp.phone_no = s.phone_no JOIN users u ON s.user_id = u.id WHERE dp.subject_name = 'Chemistry';
 Lists students who have raised doubts related to "Inorganic Chemistry" along with the subject name.


9.
 SELECT sm.name, sm.type, sm.subject_name FROM study_material sm WHERE sm.course_name = 'Chemistry Course';

Displays study materials (name, type, associated subject) for the "Chemistry" course.


10.

SELECT u.first_name || ' ' || u.last_name AS student_name FROM students s JOIN users u ON s.user_id = u.id WHERE s.phone_no NOT IN ( SELECT DISTINCT phone_no FROM doubt_panel );

Identifies less engaged or shy students.
Helps in targeted outreach or support to encourage participation.


11.

SELECT c.name AS course_name, (SELECT COUNT() FROM lectures WHERE course_name = c.name ) AS total_lectures,(SELECT COUNT() FROM tests WHERE course_name = c.name) AS total_tests, (SELECT COUNT(*) FROM study_material WHERE course_name = c.name) AS total_study_materials FROM courses c;

Query regarding course details, for ex. how many lecs, tests etc are present in the course.


12.

SELECT name AS lecture_name, duration, release_date, content FROM lectures WHERE course_name = 'Introduction to Physics' AND release_date > DATE('now') ORDER BY release_date;

Query regarding time of the lecture i.e, when is it scheduled .


13.

SELECT c.name AS course_name, COUNT(e.id) * c.price AS total_revenue FROM courses c LEFT JOIN enrollment e ON c.name = e.course_name GROUP BY c.name, c.price;

Query regarding revenue generated by a course.


14.

SELECT u.first_name || ' ' || u.last_name AS student_name, s.phone_no, SUM(q.marks) AS total_marks FROM answers a JOIN questions q ON a.question_id = q.id JOIN students s ON a.phone = s.phone_no JOIN users u ON s.user_id = u.id WHERE a.is_correct = TRUE GROUP BY s.phone_no, u.first_name, u.last_name ORDER BY total_marks DESC LIMIT 5;

Query regarding list of top performing students during multiple tests.


15.

SELECT u.first_name || ' ' || u.last_name AS student_name, s.phone_no, COUNT(e.course_name) AS courses_enrolled FROM enrollment e JOIN students s ON e.phone = s.phone_no JOIN users u ON s.user_id = u.id GROUP BY s.phone_no, u.first_name, u.last_name HAVING courses_enrolled > 1;

Query regarding students who are enrolled in multiple courses so that it can be used to send multiple updates to a student if needed.
